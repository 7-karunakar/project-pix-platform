
import React, { useState } from 'react';
import { Download, X, Calendar, Clock, MapPin, FileText } from 'lucide-react';
import { ScheduleItem, Project } from '../services/storageService';

interface SceneCallSheetProps {
  scheduleItem: ScheduleItem;
  project?: Project;
  onClose: () => void;
}

const SceneCallSheet: React.FC<SceneCallSheetProps> = ({
  scheduleItem,
  project,
  onClose
}) => {
  const [includeDetails, setIncludeDetails] = useState(true);

  const generateSceneCallSheet = () => {
    const callSheetData = {
      project: project?.title || 'Unknown Project',
      scene: scheduleItem.scene,
      description: scheduleItem.notes || 'No description available',
      date: new Date(scheduleItem.date).toLocaleDateString('en-US', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      }),
      time: scheduleItem.time,
      location: scheduleItem.location,
      status: scheduleItem.status
    };

    return callSheetData;
  };

  const downloadSceneCallSheet = () => {
    const callSheet = generateSceneCallSheet();
    const content = `
SCENE CALL SHEET

Project: ${callSheet.project}
${includeDetails ? `Date: ${callSheet.date}` : ''}
${includeDetails ? `Time: ${callSheet.time}` : ''}
${includeDetails ? `Location: ${callSheet.location}` : ''}

SCENE: ${callSheet.scene}

DESCRIPTION:
${callSheet.description}

${includeDetails ? `STATUS: ${callSheet.status.toUpperCase()}` : ''}

---
Generated by Movie Production Management System
    `.trim();

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `scene-call-sheet-${callSheet.scene.replace(/\s+/g, '-')}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    alert('Scene call sheet downloaded successfully!');
  };

  const callSheetData = generateSceneCallSheet();

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-xl shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <h3 className="text-xl font-semibold text-gray-900">Scene Call Sheet</h3>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600"
          >
            <X className="h-5 w-5" />
          </button>
        </div>

        <div className="p-6 space-y-6">
          {/* Scene Information */}
          <div className="bg-gray-50 rounded-lg p-4">
            <h4 className="font-medium text-gray-900 mb-3">Scene Information</h4>
            <div className="space-y-2">
              <div className="flex items-center space-x-2">
                <FileText className="h-4 w-4 text-gray-400" />
                <span className="font-medium">{callSheetData.scene}</span>
              </div>
              {includeDetails && (
                <>
                  <div className="flex items-center space-x-2">
                    <Calendar className="h-4 w-4 text-gray-400" />
                    <span>{callSheetData.date}</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Clock className="h-4 w-4 text-gray-400" />
                    <span>{callSheetData.time}</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <MapPin className="h-4 w-4 text-gray-400" />
                    <span>{callSheetData.location}</span>
                  </div>
                </>
              )}
            </div>
          </div>

          {/* Scene Description */}
          <div>
            <h4 className="font-medium text-gray-900 mb-3">Scene Description</h4>
            <div className="bg-white border border-gray-200 rounded-lg p-4">
              <p className="text-gray-700 whitespace-pre-wrap">
                {callSheetData.description}
              </p>
            </div>
          </div>

          {/* Options */}
          <div>
            <h4 className="font-medium text-gray-900 mb-3">Options</h4>
            <div className="flex items-center space-x-2">
              <input
                type="checkbox"
                id="includeDetails"
                checked={includeDetails}
                onChange={(e) => setIncludeDetails(e.target.checked)}
                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              />
              <label htmlFor="includeDetails" className="text-sm text-gray-700">
                Include date, time, and location details
              </label>
            </div>
          </div>

          {/* Preview */}
          <div>
            <h4 className="font-medium text-gray-900 mb-3">Preview</h4>
            <div className="bg-gray-50 border border-gray-200 rounded-lg p-4 text-sm font-mono whitespace-pre-wrap">
              {`SCENE CALL SHEET

Project: ${callSheetData.project}
${includeDetails ? `Date: ${callSheetData.date}` : ''}
${includeDetails ? `Time: ${callSheetData.time}` : ''}
${includeDetails ? `Location: ${callSheetData.location}` : ''}

SCENE: ${callSheetData.scene}

DESCRIPTION:
${callSheetData.description}

${includeDetails ? `STATUS: ${callSheetData.status.toUpperCase()}` : ''}

---
Generated by Movie Production Management System`}
            </div>
          </div>

          {/* Actions */}
          <div className="flex justify-end">
            <button
              onClick={downloadSceneCallSheet}
              className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              <Download className="h-4 w-4" />
              <span>Download Scene Call Sheet</span>
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SceneCallSheet;
