
import React, { useState } from 'react';
import { Mail, Download, Send, X, Calendar, Clock, MapPin, Users } from 'lucide-react';
import { ScheduleItem, Project, CastCrewMember } from '../services/storageService';

interface CallSheetGeneratorProps {
  scheduleItem: ScheduleItem;
  project?: Project;
  castCrew: CastCrewMember[];
  onClose: () => void;
}

const CallSheetGenerator: React.FC<CallSheetGeneratorProps> = ({
  scheduleItem,
  project,
  castCrew,
  onClose
}) => {
  const [emailList, setEmailList] = useState<string[]>([]);
  const [customEmail, setCustomEmail] = useState('');
  const [weatherInfo, setWeatherInfo] = useState('Sunny, 75°F');
  const [specialInstructions, setSpecialInstructions] = useState('');
  const [sendingEmails, setSendingEmails] = useState(false);

  // Get cast and crew members for this schedule item
  const getScheduledMembers = () => {
    const allScheduled = [...scheduleItem.cast, ...scheduleItem.crew];
    return castCrew.filter(member => allScheduled.includes(member.name));
  };

  const addEmailToList = (email: string) => {
    if (email && !emailList.includes(email)) {
      setEmailList([...emailList, email]);
    }
  };

  const removeEmailFromList = (email: string) => {
    setEmailList(emailList.filter(e => e !== email));
  };

  const handleAddCustomEmail = () => {
    if (customEmail && customEmail.includes('@')) {
      addEmailToList(customEmail);
      setCustomEmail('');
    }
  };

  const generateCallSheet = () => {
    const callSheetData = {
      project: project?.title || 'Unknown Project',
      date: new Date(scheduleItem.date).toLocaleDateString('en-US', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      }),
      time: scheduleItem.time,
      scene: scheduleItem.scene,
      location: scheduleItem.location,
      weather: weatherInfo,
      specialInstructions,
      cast: scheduleItem.cast,
      crew: scheduleItem.crew,
      notes: scheduleItem.notes
    };

    return callSheetData;
  };

  const downloadCallSheet = () => {
    const callSheet = generateCallSheet();
    const content = `
CALL SHEET

Project: ${callSheet.project}
Date: ${callSheet.date}
Time: ${callSheet.time}
Scene: ${callSheet.scene}
Location: ${callSheet.location}

Weather: ${callSheet.weather}

CAST:
${callSheet.cast.map(member => `• ${member}`).join('\n')}

CREW:
${callSheet.crew.map(member => `• ${member}`).join('\n')}

SPECIAL INSTRUCTIONS:
${callSheet.specialInstructions || 'None'}

NOTES:
${callSheet.notes || 'None'}

---
Generated by Movie Production Management System
    `.trim();

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `call-sheet-${scheduleItem.date}-${scheduleItem.scene.replace(/\s+/g, '-')}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const simulateEmailSending = async () => {
    setSendingEmails(true);
    
    // Simulate email sending delay
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Save email distribution log
    const emailLog = {
      id: Date.now().toString(),
      scheduleItemId: scheduleItem.id,
      recipients: emailList,
      timestamp: new Date().toISOString(),
      callSheetData: generateCallSheet()
    };

    const existingLogs = JSON.parse(localStorage.getItem('emailLogs') || '[]');
    existingLogs.push(emailLog);
    localStorage.setItem('emailLogs', JSON.stringify(existingLogs));

    setSendingEmails(false);
    alert(`Call sheet sent to ${emailList.length} recipients!`);
    onClose();
  };

  const scheduledMembers = getScheduledMembers();

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-xl shadow-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto">
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <h3 className="text-xl font-semibold text-gray-900">Generate Call Sheet</h3>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600"
          >
            <X className="h-5 w-5" />
          </button>
        </div>

        <div className="p-6 space-y-6">
          {/* Schedule Information */}
          <div className="bg-gray-50 rounded-lg p-4">
            <h4 className="font-medium text-gray-900 mb-3">Schedule Information</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
              <div className="flex items-center space-x-2">
                <Calendar className="h-4 w-4 text-gray-400" />
                <span>{new Date(scheduleItem.date).toLocaleDateString()}</span>
              </div>
              <div className="flex items-center space-x-2">
                <Clock className="h-4 w-4 text-gray-400" />
                <span>{scheduleItem.time}</span>
              </div>
              <div className="flex items-center space-x-2">
                <MapPin className="h-4 w-4 text-gray-400" />
                <span>{scheduleItem.location}</span>
              </div>
              <div className="flex items-center space-x-2">
                <Users className="h-4 w-4 text-gray-400" />
                <span>{scheduleItem.scene}</span>
              </div>
            </div>
          </div>

          {/* Weather and Instructions */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Weather Information</label>
              <input
                type="text"
                value={weatherInfo}
                onChange={(e) => setWeatherInfo(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Weather conditions"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Special Instructions</label>
              <input
                type="text"
                value={specialInstructions}
                onChange={(e) => setSpecialInstructions(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Any special instructions"
              />
            </div>
          </div>

          {/* Email Distribution */}
          <div>
            <h4 className="font-medium text-gray-900 mb-3">Email Distribution</h4>
            
            {/* Quick Add from Scheduled Members */}
            <div className="mb-4">
              <p className="text-sm text-gray-600 mb-2">Scheduled Cast & Crew:</p>
              <div className="flex flex-wrap gap-2">
                {scheduledMembers.map(member => (
                  <button
                    key={member.id}
                    onClick={() => addEmailToList(member.contactInfo.email)}
                    disabled={emailList.includes(member.contactInfo.email)}
                    className={`px-3 py-1 text-sm rounded-full border transition-colors ${
                      emailList.includes(member.contactInfo.email)
                        ? 'bg-green-100 text-green-800 border-green-300'
                        : 'bg-gray-100 text-gray-700 border-gray-300 hover:bg-gray-200'
                    }`}
                  >
                    {member.name}
                  </button>
                ))}
              </div>
            </div>

            {/* Custom Email Input */}
            <div className="flex space-x-2 mb-4">
              <input
                type="email"
                value={customEmail}
                onChange={(e) => setCustomEmail(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleAddCustomEmail()}
                className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Add additional email..."
              />
              <button
                onClick={handleAddCustomEmail}
                className="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
              >
                Add
              </button>
            </div>

            {/* Email List */}
            <div className="bg-gray-50 rounded-lg p-4">
              <p className="text-sm font-medium text-gray-700 mb-2">
                Recipients ({emailList.length}):
              </p>
              {emailList.length === 0 ? (
                <p className="text-sm text-gray-500">No recipients added</p>
              ) : (
                <div className="space-y-1">
                  {emailList.map(email => (
                    <div key={email} className="flex items-center justify-between bg-white p-2 rounded border">
                      <span className="text-sm text-gray-700">{email}</span>
                      <button
                        onClick={() => removeEmailFromList(email)}
                        className="text-red-500 hover:text-red-700"
                      >
                        <X className="h-4 w-4" />
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>

          {/* Actions */}
          <div className="flex flex-col sm:flex-row justify-end space-y-3 sm:space-y-0 sm:space-x-3">
            <button
              onClick={downloadCallSheet}
              className="flex items-center justify-center space-x-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
            >
              <Download className="h-4 w-4" />
              <span>Download PDF</span>
            </button>
            <button
              onClick={simulateEmailSending}
              disabled={emailList.length === 0 || sendingEmails}
              className="flex items-center justify-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
            >
              {sendingEmails ? (
                <>
                  <div className="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full"></div>
                  <span>Sending...</span>
                </>
              ) : (
                <>
                  <Send className="h-4 w-4" />
                  <span>Send Email</span>
                </>
              )}
            </button>
          </div>

          {/* Email Note */}
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <p className="text-sm text-blue-700">
              <strong>Note:</strong> This is a demo implementation. In production, you would integrate with 
              an email service provider (like SendGrid, Mailgun, or AWS SES) to send actual emails.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CallSheetGenerator;
